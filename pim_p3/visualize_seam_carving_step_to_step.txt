'''
INPUT: np.array (Image) can be 2D/3D, path, mark_as(opt)
OUTPUT: np.array with marked 

mark_as refers to a color, it’s default on red, but it can be set on blue, green, black or white.

'''
def markPath(mat, path, mark_as='red'):
    assert mark_as in ['red','green','blue','black','white']
    
    if len(mat.shape) == 2:
        mat = color.gray2rgb(mat)
    
    ret = np.zeros(mat.shape)
    ret[:,:,:] = mat[:,:,:]
    
    # Preprocess image
    if np.max(ret) < 1.1 or np.max(ret) > 256: # matrix is in float numbers
        ret -= np.min(ret)
        ret /= np.max(ret)
        ret *= 256
    
    # Determinate components
    if mark_as == 'red':
        r,g,b = 255,0,0
    elif mark_as == 'green':
        r,g,b = 0,255,0
    elif mark_as == 'blue':
        r,g,b = 0,0,255
    elif mark_as == 'white':
        r,g,b = 255,255,255
    elif mark_as == 'black':
        r,b,b = 0,0,0

    # Place R,G,B
    for i in path:
        ret[i[0],i[1],0] = r
        ret[i[0],i[1],1] = g
        ret[i[0],i[1],2] = b
    return ret.astype('uint8')

Ahora para poder utilizarlo lo unico que tenemos que hacer es: 

1) quitar la linea %matplotlib inline
2) crear una figura al inicio del método plt.figure(1)
3) importar las funciones que permiten interactuar dinámicamente con las figuras from pylab import ion, ioff
4) Hacer la llamada ion()

Ahora ya podemos dibujar en nuestra figura de una forma no bloqueante. El siguiente ejemplo de código lo ilustra;

from pylab import ion, off
ion()
plt.figure(1)
plt.show()

for i in range(10):
plt.imshow( WHATEVER )
plt.draw()

